version: 2.1
orbs:
  node: circleci/node@4.1.0
  aws-ecr: circleci/aws-ecr@6.9.1
  aws-eks: circleci/aws-eks@1.0.3
  aws-cli: circleci/aws-cli@1.4.0
  kubernetes: circleci/kubernetes@0.11.2
commands:
    create_yaml:
        parameters:
            file:
                type: string
        steps:
            - run:
                name: Create app yaml file
                command: |
                    cd ~/project
                    chmod +rwx << parameters.file >>
                    ./<< parameters.file >> > app.yaml
    delete_files:
        steps:
            - run: 
                name: Remove files
                command: |
                  rm ${HOME}/gcp-key.json
                  rm app.yaml

    delete_dockerfile:
      steps:
        - run:
            name: Remove docker file
            command: |
             rm Dockerfile

jobs:
    run_functional_tests:
        executor:
            name: node/default
        steps:
            - checkout
            - node/install-packages
            - run: 
                name: Gauge tests
                command: |
                  sudo apt-get update
                  sudo apt-get install -y git-all gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libgbm-dev libappindicator1 libnss3 lsb-release xdg-utils wget
                  sudo rm -rf /var/lib/apt/lists/*
                  npm run functional_test -- --env test
    deploy:
        parameters:
            env_name:
                type: string
            sh_file:
                type: string
        docker:
            - image: google/cloud-sdk
        steps:
            - checkout
            - run:
                name: Authorize gcloud
                command: |
                  echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
                  gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
                  gcloud --quiet config set project ${GCP_PROJECT}
            - create_yaml:
                file: <<parameters.sh_file>>
                
            - delete_dockerfile 
            - deploy: 
                name: Deploy app to GAE
                command: |
                  if [[ << parameters.env_name >> == "dev" ]]; then
                    gcloud app deploy app.yaml -v devversion --no-promote
                  elif [[ << parameters.env_name >> == "test" ]]; then
                    gcloud app deploy app.yaml -v somerandom --no-promote
                  else
                    gcloud app deploy app.yaml
                    gcloud app deploy dispatch.yaml
                  fi
            - delete_files
    approve_to_deploy:
        docker: 
            - image: circleci/node:13.4
        steps:
            - run: echo "Hold for approval"

    db_migrate:
        parameters:
            db_name:
              type: string
        executor:
            name: node/default
        steps:
            - checkout
            - run :
                name: Run DB Proxy
                command: |
                  sudo apt-get update
                  sudo apt-get install wget
                  wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-265.0.0-linux-x86_64.tar.gz
                  tar -zxf google-cloud-sdk-*
                  cd google-cloud-sdk
                  pwd
                  ./install.sh --quiet
                  echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
                  ./bin/gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
                  ./bin/gcloud --quiet config set project ${GCP_PROJECT}
                  export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json
                  echo $GOOGLE_APPLICATION_CREDENTIALS
                  wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
                  chmod +x cloud_sql_proxy
                  nohup ./cloud_sql_proxy -dir=./cloudsql -instances=ekstepspeechrecognition:us-central1:crowdsourcedb=tcp:5432 &
                  sleep 25s
                  cat nohup.out
            - node/install-packages
            - run:
                name: Run DB Migrate
                command: |
                    export DATABASE_URL=postgresql://${DEV_DB_USER}:${DEV_DB_PASS}@127.0.0.1/<< parameters.db_name >>
                    echo << parameters.db_name >>
                    npx db-migrate up

    db_migrate_aws:
        parameters:
            db_name:
              type: string
        executor:
            name: node/default
        steps:
            - checkout
            - node/install-packages
            - run:
                name: Run DB Migrate
                command: |
                    export DATABASE_URL=postgresql://${DEV_DB_USER}:${DB_PASS_AWS}@{DB_HOST_AWS}/<< parameters.db_name >>
                    echo << parameters.db_name >>
                    npx db-migrate up

    # build_and_push_image_ecr:
    #     parameters:
    #       env-name:
    #         description: |
    #           Name of the env
    #         type: string
    #     executor:
    #         name: node/default
    #     steps:
    #       - aws-ecr/build-and-push-image:
    #           repo: ${REPO}
    #           tag: << parameters.env-name >>

    eks_fargate_deployment:
        executor: aws-eks/python3
        parameters:
          cluster-name:
            description: |
              Name of the EKS cluster
            type: string
          env-name:
            description: |
              Name of the env
            type: string
          
        steps:
          - checkout
          - aws-cli/setup:
              profile-name: circle-ci
          - kubernetes/install
          - run:
              command: |
                 aws eks --region ap-south-1 update-kubeconfig --name << parameters.cluster-name >>
                 ENV_IMAGE_NAME=${AWS_ECR_ACCOUNT_URL}/${REPO}:<< parameters.env-name >>
                 sed -e "s|IMAGE_NAME|$ENV_IMAGE_NAME|g" ${HOME}/project/deployments/k8s/deployment.yaml | kubectl -n << parameters.env-name >> apply  -f -

              name: Deploy container 



workflows:
    build_test_deploy:
        jobs:
          - node/test:
               version: "13.4"

          - db_migrate_aws:
               name: migrate_test_aws
               db_name: ${TEST_DB_NAME}

          - aws-ecr/build-and-push-image:
              repo: ${REPO}
              tag: test
              requires:
                 - node/test

          - eks_fargate_deployment:
              name: dev_deployment_eks
              cluster-name: ${CLUSTER_NAME}
              env-name: test
              requires:
                - push_dev_image


          - approve_to_deploy:
                name: approve_prod_deployment
                type: approval
                requires:
                   - push_dev_image
                   - dev_deployment_eks

          - db_migrate_aws:
               name: migrate_prod_aws
               db_name: ${TEST_DB_NAME}
               requires:
                 - approve_prod_deployment

          - aws-ecr/build-and-push-image:
              name: push_prod_image
              repo: ${REPO}
              tag: prod
              requires:
                #  - migrate_prod_aws
                 - approve_prod_deployment

          - eks_fargate_deployment:
              name: prod_deployment_eks
              cluster-name: ${CLUSTER_NAME}
              env-name: test
              requires:
                 - push_prod_image
                 - approve_prod_deployment  

          - db_migrate:
               name: migrate_dev
               db_name: ${DEV_DB_NAME}
               requires:
                 - node/test
          - deploy:
               name: deploy_dev
               env_name: dev
               sh_file: app_yaml_dev.sh
               requires:
                 - migrate_dev
          - approve_to_deploy:
                name: approve_test
                type: approval
                requires:
                   - deploy_dev
          - db_migrate:
               name: migrate_test
               db_name: ${TEST_DB_NAME}
               requires:
                 - approve_test
          - deploy:
               name: deploy_test
               env_name: test
               sh_file: app_yaml_test.sh
               requires:
                 - migrate_test
          - run_functional_tests:
                 requires:
                   - deploy_test
          - approve_to_deploy:
                name: approve_prod
                type: approval
                requires:
                   - deploy_test
          - db_migrate:
              name: migrate_prod
              db_name: ${DB_NAME}
              requires:
                - approve_prod
          - deploy:
                name: deploy_prod
                env_name: prod
                sh_file: app_yaml_prod.sh
                requires:
                  - migrate_prod
                filters:
                  branches:
                    only:
                      - release