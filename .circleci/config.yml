version: 2.1
orbs:
  node: circleci/node@4.4.0
  azure-aks: circleci/azure-aks@0.3.0
  azure-acr: circleci/azure-acr@0.2.0
  kubernetes: circleci/kubernetes@0.11.2
  azure-cli: circleci/azure-cli@1.2.0
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-eks: circleci/aws-eks@1.0.3
  aws-cli: circleci/aws-cli@1.4.0
  aws-s3: circleci/aws-s3@2.0.0

definition:
  fast-checkout: &fast-checkout
    attach_workspace:
      at: .

jobs:
  create-workspace:
    executor: node/default
    steps:
      - checkout
      - run: rm -rf .git
      - run: mkdir ${HOME}/project/crowdsource-api/locales
      - run: cp -v -R crowdsource-ui/locales/ ${HOME}/project/crowdsource-api/
      - persist_to_workspace:
          root: .
          paths:
            - .

  setup_functional_tests:
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      env_name:
        type: string
      db_name:
        type: string
    executor: azure-aks/default
    steps:
      - *fast-checkout
      - azure-aks/update-kubeconfig-with-credentials:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          perform-login: true
          resource-group: ${AZURE_RESOURCE_GROUP}
      - run:
          name: Setup for Functional tests
          command: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            sudo apt-get install -y postgresql-client

            ENV_IMAGE_NAME=${AZURE_LOGIN_SERVER_NAME}/${AZURE_REPO}:<< parameters.env_name >>
            ENV_IMAGE_NAME_DB_REFRESHER=${AZURE_LOGIN_SERVER_NAME}/${DB_REFRESHER_REPO}:<< parameters.env_name >>

            AZURE_DB_USER=$(python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))" $AZURE_DB_USER)
            AZURE_DB_PASS=$(python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))" $AZURE_DB_PASS)

            psql "postgresql://${AZURE_DB_USER}:${AZURE_DB_PASS}@${AZURE_DB_HOST}/<< parameters.db_name >>" -f functional_tests/sql/setupDummyData.sql
            kubectl -n << parameters.env_name >> patch cronjob refresh-data  -p '{"spec":{"schedule": "* * * * *"}}'

            sleep 40

            sed -e "s|IMAGE_NAME_DB_REFRESHER|$ENV_IMAGE_NAME_DB_REFRESHER|g;s/CIRCLE_SHA1/$CIRCLE_SHA1/g" ${HOME}/project/db-refresher/k8s-deployments/dbrefresher.yaml | kubectl -n << parameters.env_name >> apply  -f -

  run_functional_tests:
    parameters:
      env_name:
        type: string
      db_name:
        type: string
    executor:
      name: node/default
    steps:
      - *fast-checkout
      - run:
          name: Gauge tests
          command: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            sudo apt-get install -y postgresql-client git-all gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libgbm-dev libappindicator1 libnss3 lsb-release xdg-utils wget

            AZURE_DB_USER=$(python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))" $AZURE_DB_USER)
            AZURE_DB_PASS=$(python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))" $AZURE_DB_PASS)

            psql "postgresql://${AZURE_DB_USER}:${AZURE_DB_PASS}@${AZURE_DB_HOST}/<< parameters.db_name >>" -f functional_tests/sql/dataSeed.sql
            sudo rm -rf /var/lib/apt/lists/*
            npm run install:ft
            npm run functional_test -- -- --env <<parameters.env_name>>
            psql "postgresql://${AZURE_DB_USER}:${AZURE_DB_PASS}@${AZURE_DB_HOST}/<< parameters.db_name >>" -f functional_tests/sql/deleteSeedData.sql
      - run:
          name: Chat Notification Fail
          when: on_fail
          command: >
            curl --header "Content-Type: application/json"
            --request POST
            --data "{\"cards\":[{\"header\":{\"title\":\"Oops. Build ${CIRCLE_BUILD_NUM} failed.\",\"subtitle\":\"${CIRCLE_PROJECT_REPONAME}\",\"imageUrl\":\"https://png.pngtree.com/svg/20170406/icon_failed__1325447.png\",\"imageStyle\":\"IMAGE\"},\"sections\":[{\"widgets\":[{\"keyValue\":{\"topLabel\":\"${CIRCLE_TAG}\",\"content\":\"${CIRCLE_SHA1}\"}}]},{\"widgets\":[{\"buttons\":[{\"textButton\":{\"text\":\"DETAILS\",\"onClick\":{\"openLink\":{\"url\":\"${CIRCLE_BUILD_URL}\"}}}}]}]}]}]}"
            $CHAT_WEBHOOK_URL
      - store_artifacts:
          path: functional_tests/reports
          destination: reports

  approve_to_deploy:
    docker:
      - image: circleci/node:13.4
    steps:
      - run: echo "Hold for approval"

  cdn_invalidation:
    executor: azure-cli/default
    parameters:
      env-name:
        description: |
          Name of the cdn profile
        type: string
      resource-group:
        description: |
          Azure resource group
        type: string
      profile-name:
        description: |
          Azure profile name
        type: string

    steps:
      - azure-cli/install
      - azure-cli/login-with-user:
          alternate-tenant: false
      - run:
          name: cdn_invalidation
          command: |
            az cdn endpoint purge -g << parameters.resource-group >> -n << parameters.env-name >> --profile-name << parameters.profile-name >> --content-paths '/*'

  aks_deployment_ui:
    executor: azure-aks/default
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      env-name:
        description: |
          Name of the env
        type: string
      azure_resource_group:
        description: |
          Name of the resource group
        type: string
      azure_login_server_name:
        description: |
          Name of the acr
        type: string

    steps:
      - *fast-checkout
      - azure-aks/update-kubeconfig-with-credentials:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          perform-login: true
          resource-group: << parameters.azure_resource_group >>
      - run:
          name: Deploy container
          command: |
            ENV_IMAGE_NAME=${AZURE_LOGIN_SERVER_NAME}/${AZURE_REPO_UI}:<< parameters.env-name >>

            sed -e "s|IMAGE_NAME|$ENV_IMAGE_NAME|g;s/CIRCLE_SHA1/$CIRCLE_SHA1/g" ${HOME}/project/crowdsource-fe/k8s-deployments/deployment_<< parameters.env-name >>.yaml | kubectl -n << parameters.env-name >> apply  -f -

  failed-notification:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Chat Notification Fail
          when: on_fail
          command: >
            curl --header "Content-Type: application/json"
            --request POST
            --data "{\"cards\":[{\"header\":{\"title\":\"Oops. Build ${CIRCLE_BUILD_NUM} failed.\",\"subtitle\":\"${CIRCLE_PROJECT_REPONAME}\",\"imageUrl\":\"https://png.pngtree.com/svg/20170406/icon_failed__1325447.png\",\"imageStyle\":\"IMAGE\"},\"sections\":[{\"widgets\":[{\"keyValue\":{\"topLabel\":\"${CIRCLE_TAG}\",\"content\":\"${CIRCLE_SHA1}\"}}]},{\"widgets\":[{\"buttons\":[{\"textButton\":{\"text\":\"DETAILS\",\"onClick\":{\"openLink\":{\"url\":\"${CIRCLE_BUILD_URL}\"}}}}]}]}]}]}"
            $CHAT_WEBHOOK_URL
  success-notification:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Chat Notification Success
          when: on_success
          command: >
            curl --header "Content-Type: application/json"
            --request POST
            --data "{\"cards\":[{\"header\":{\"title\":\"Build ${CIRCLE_BUILD_NUM} passed.\",\"subtitle\":\"${CIRCLE_PROJECT_REPONAME}\",\"imageUrl\":\"https://png.pngtree.com/svg/20170510/success_404253.png\",\"imageStyle\":\"IMAGE\"},\"sections\":[{\"widgets\":[{\"keyValue\":{\"topLabel\":\"${CIRCLE_TAG}\",\"content\":\"${CIRCLE_SHA1}\"}}]},{\"widgets\":[{\"buttons\":[{\"textButton\":{\"text\":\"DETAILS\",\"onClick\":{\"openLink\":{\"url\":\"${CIRCLE_BUILD_URL}\"}}}}]}]}]}]}"
            $CHAT_WEBHOOK_URL

  check_fe:
    executor:
      name: node/default
    parameters:
      env_name:
        type: string
    steps:
      - checkout
      - run:
          name: Update apt-get
          command: sudo apt-get update
      - run:
          name: Install Headless Chrome & unix dependencies
          command: >
            sudo apt-get install -yq \

            gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2
            libcups2 libdbus-1-3 \

            libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0
            libglib2.0-0 libgtk-3-0 libnspr4 \

            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1
            libxcb1 libxcomposite1 libxcursor1 libgbm-dev \

            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1
            libxtst6 ca-certificates \

            fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget unzip
      - run:
          name: Build code with check
          command: |
            cd crowdsource-api
            npm i
            cd ..
            cd crowdsource-fe
            npm i
            unzip ./public/do-not-unzip-aggregated-json.zip -d ./public
            CI=true NEXT_TELEMETRY_DISABLED=1 NODE_CONFIG_ENV=<< parameters.env_name >> npm run build
      - run:
          name: Lighthouse
          command: |
            cd crowdsource-fe
            PORT=8080 NODE_CONFIG_ENV=<< parameters.env_name >> npm run test:lh-ci
      - store_artifacts:
          path: crowdsource-fe/.lighthouseci
          destination: .lighthouseci
      - store_artifacts:
          path: crowdsource-fe/coverage
          destination: coverage
      - store_test_results:
          path: crowdsource-fe/test-results

  eks_fargate_deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      env-name:
        description: |
          Name of the env
        type: string

    steps:
      - *fast-checkout
      - aws-cli/setup:
          profile-name: circle-ci
      - kubernetes/install
      - run:
          command: |
            aws eks --region ap-south-1 update-kubeconfig --name << parameters.cluster-name >>
            ENV_IMAGE_NAME=${AWS_ECR_ACCOUNT_URL}/${AZURE_REPO_UI}:<< parameters.env-name >>
            sed -e "s|IMAGE_NAME|$ENV_IMAGE_NAME|g;s/CIRCLE_SHA1/$CIRCLE_SHA1/g" ${HOME}/project/crowdsource-fe/k8s-deployments/deployment_dev.yaml | kubectl -n << parameters.env-name >> apply  -f -
          name: Deploy container
      - run: aws cloudfront create-invalidation --distribution-id ${NEXT_DEV_ID} --paths '/*'

workflows:
  build_test_deploy:
    jobs:
      - check_fe:
          name: check_fe
          env_name: default

      - create-workspace:
          name: create-workspace
          requires:
            - check_fe
          filters:
            branches:
              only: [master, nextjs-basic-setup]

      - azure-acr/build-and-push-image:
          pre-steps:
            - *fast-checkout
          name: push_dev_image_next_ui
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY}
          path: ./
          extra-build-args: --build-arg NODE_CONFIG_ENV=dev
          repo: ${AZURE_REPO_UI}
          tag: dev
          checkout: false
          requires:
            - create-workspace

      # - aws-ecr/build-and-push-image:
      #     pre-steps:
      #       - *fast-checkout
      #     name: push_dev_image_next_ui
      #     repo: ${AZURE_REPO_UI}
      #     tag: dev
      #     path: ./
      #     extra-build-args: --build-arg NODE_CONFIG_ENV=dev
      #     checkout: false
      #     requires:
      #       - create-workspace

      - aks_deployment_ui:
          name: dev_ui_deployment_aks
          cluster-name: ${AZURE_CLUSTER_NAME_UI}
          env-name: dev
          azure_resource_group: ${AZURE_RESOURCE_GROUP}
          azure_login_server_name: ${AZURE_LOGIN_SERVER_NAME}
          requires:
            - push_dev_image_next_ui

      - cdn_invalidation:
          name: cdn_invalidation_ui_dev
          env-name: next-dev-ui
          resource-group: ${AZURE_RESOURCE_GROUP}
          profile-name: ${AZURE_PROFILE_NAME}
          requires:
            - dev_ui_deployment_aks

      # - eks_fargate_deployment:
      #     name: dev_ui_deployment_eks
      #     cluster-name: ${CLUSTER_NAME}
      #     env-name: dev
      #     requires:
      #       - push_dev_image_next_ui

      - azure-acr/build-and-push-image:
          pre-steps:
            - *fast-checkout
          name: push_test_image_next_ui
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY}
          path: ./
          extra-build-args: --build-arg NODE_CONFIG_ENV=test
          repo: ${AZURE_REPO_UI}
          tag: test
          checkout: false
          requires:
            - dev_ui_deployment_aks

      - aks_deployment_ui:
          name: test_ui_deployment_aks
          cluster-name: ${AZURE_CLUSTER_NAME_UI}
          env-name: test
          azure_resource_group: ${AZURE_RESOURCE_GROUP}
          azure_login_server_name: ${AZURE_LOGIN_SERVER_NAME}
          requires:
            - push_test_image_next_ui

      - cdn_invalidation:
          name: cdn_invalidation_ui_test
          env-name: next-test-ui
          resource-group: ${AZURE_RESOURCE_GROUP}
          profile-name: ${AZURE_PROFILE_NAME}
          requires:
            - test_ui_deployment_aks

      - azure-acr/build-and-push-image:
          pre-steps:
            - *fast-checkout
          name: push_uat_image_next_ui
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY}
          path: ./
          extra-build-args: --build-arg NODE_CONFIG_ENV=uat
          repo: ${AZURE_REPO_UI}
          tag: uat
          checkout: false
          requires:
            - dev_ui_deployment_aks

      - aks_deployment_ui:
          name: uat_ui_deployment_aks
          cluster-name: ${AZURE_CLUSTER_NAME_UI}
          env-name: uat
          azure_resource_group: ${AZURE_RESOURCE_GROUP}
          azure_login_server_name: ${AZURE_LOGIN_SERVER_NAME}
          requires:
            - push_uat_image_next_ui

      - cdn_invalidation:
          name: cdn_invalidation_ui_uat
          env-name: next-uat-ui
          resource-group: ${AZURE_RESOURCE_GROUP}
          profile-name: ${AZURE_PROFILE_NAME}
          requires:
            - uat_ui_deployment_aks

      - azure-acr/build-and-push-image:
          pre-steps:
            - *fast-checkout
          name: push_prod_image_next_ui
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY}
          path: ./
          extra-build-args: --build-arg NODE_CONFIG_ENV=prod
          repo: ${AZURE_REPO_UI}
          tag: prod
          checkout: false
          requires:
            - create-workspace

      # - aks_deployment_ui:
      #     name: prod_ui_deployment_aks
      #     cluster-name: ${AZURE_CLUSTER_NAME_UI}
      #     env-name: prod
      #     requires:
      #       - push_prod_image_next_ui

      # - cdn_invalidation:
      #     name: cdn_invalidation_ui_prod
      #     env-name: next-prod
      #     resource-group: ${AZURE_RESOURCE_GROUP}
      #     profile-name: ${AZURE_PROFILE_NAME}
      #     requires:
      #       - prod_ui_deployment_aks
