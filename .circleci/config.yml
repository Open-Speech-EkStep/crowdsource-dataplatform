version: 2.1
orbs:
  node: circleci/node@4.1.0
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-eks: circleci/aws-eks@1.0.3
  aws-cli: circleci/aws-cli@1.4.0
  kubernetes: circleci/kubernetes@0.11.2
  aws-s3: circleci/aws-s3@2.0.0

definition:
  fast-checkout: &fast-checkout
    attach_workspace:
      at: /root

jobs:
  create-workspace:
    executor: node/default
    steps:
      - checkout
      - run: rm -rf .git
      - run: pwd
      - run: ls
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - crowdsource-dataplatform

  run_functional_tests:
    parameters:
      env_name:
        type: string
    executor:
      name: node/default
    steps:
      - *fast-checkout
      - node/install-packages
      - run:
          name: Gauge tests
          command: |
            sudo apt-get update
            sudo apt-get install -y git-all gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libgbm-dev libappindicator1 libnss3 lsb-release xdg-utils wget
            sudo rm -rf /var/lib/apt/lists/*
            npm run functional_test -- --env <<parameters.env_name>>

  approve_to_deploy:
    docker:
      - image: circleci/node:13.4
    steps:
      - run: echo "Hold for approval"

  build_ui_push_to_s3:
    parameters:
      env_name:
        type: string
      distributionId:
        type: string
    executor:
      name: node/default
    steps:
      - *fast-checkout
      - node/install-packages
      - run: npm run gulp -- --env=<< parameters.env_name >>
      - aws-s3/sync:
          from: public/
          to: 's3://${STATIC_CONTENT_BUCKET}-<< parameters.env_name >>'
      - run: aws cloudfront create-invalidation --distribution-id << parameters.distributionId >> --paths '/*'

  db_migrate_aws:
    parameters:
      db_name:
        type: string
    executor:
      name: node/default
    steps:
      - *fast-checkout
      - node/install-packages
      - run:
          name: Run DB Migrate
          command: |
            echo << parameters.db_name >>
            export DATABASE_URL=postgresql://${DEV_DB_USER}:${DB_PASS_AWS}@${DB_HOST_AWS}/<< parameters.db_name >>
            echo << parameters.db_name >>
            echo $DATABASE_URL
            npx db-migrate up

  eks_fargate_deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      env-name:
        description: |
          Name of the env
        type: string

    steps:
      - *fast-checkout
      - aws-cli/setup:
          profile-name: circle-ci
      - kubernetes/install
      - run:
          command: |
            aws eks --region ap-south-1 update-kubeconfig --name << parameters.cluster-name >>
            ENV_IMAGE_NAME=${AWS_ECR_ACCOUNT_URL}/${REPO}:<< parameters.env-name >>
            ENV_IMAGE_NAME_DB_REFRESHER=${AWS_ECR_ACCOUNT_URL}/${DB_REFRESHER_REPO}:<< parameters.env-name >>
            kubectl -n << parameters.env-name >> apply  -f ${HOME}/project/deployments/k8s/autoscaler_<< parameters.env-name >>.yaml
            sed -e "s|IMAGE_NAME|$ENV_IMAGE_NAME|g;s/CIRCLE_SHA1/$CIRCLE_SHA1/g" ${HOME}/project/deployments/k8s/deployment.yaml | kubectl -n << parameters.env-name >> apply  -f -
            sed -e "s|IMAGE_NAME_DB_REFRESHER|$ENV_IMAGE_NAME_DB_REFRESHER|g;s/CIRCLE_SHA1/$CIRCLE_SHA1/g" ${HOME}/project/deployments/k8s/dbrefresher.yaml | kubectl -n << parameters.env-name >> apply  -f -
          name: Deploy container

workflows:
  build_test_deploy:
    jobs:
      - create-workspace:
          name: create-workspace

      - db_migrate_aws:
          name: migrate_dev_aws
          db_name: ${DEV_DB_NAME}
          requires:
             - create-workspace
          filters:
            branches:
              only: [master, circleci-workspace]

      - build_ui_push_to_s3:
          name: build_dev_ui
          env_name: dev
          distributionId: ${DEV_DISTRIBUTION_ID}
          requires:
            - push_dev_image

      - aws-ecr/build-and-push-image:
          name: push_dev_image
          repo: ${REPO}
          tag: dev
          requires:
            #  - node/test
            - migrate_dev_aws

      - aws-ecr/build-and-push-image:
          name: push_dev_db_refresher_image
          repo: ${DB_REFRESHER_REPO}
          dockerfile: Dockerfile-dbRefresh
          tag: "dev,test,prod"
          requires:
            - migrate_dev_aws

      - eks_fargate_deployment:
          name: dev_deployment_eks
          cluster-name: ${CLUSTER_NAME}
          env-name: dev
          requires:
            - push_dev_image

      - run_functional_tests:
          name: functional_tests_dev
          env_name: dev
          requires:
            - dev_deployment_eks
            - build_dev_ui      

      - approve_to_deploy:
          name: approve_test_deployment_eks
          type: approval
          requires:
            - functional_tests_dev

      - db_migrate_aws:
          name: migrate_test_aws
          db_name: ${TEST_DB_NAME}
          requires:
            - approve_test_deployment_eks

      - build_ui_push_to_s3:
          name: build_test_ui
          env_name: test
          distributionId: ${TEST_DISTRIBUTION_ID}
          requires:
            - push_test_image

      - aws-ecr/build-and-push-image:
          name: push_test_image
          repo: ${REPO}
          tag: test
          requires:
            - migrate_test_aws

      - eks_fargate_deployment:
          name: test_deployment_eks
          cluster-name: ${CLUSTER_NAME}
          env-name: test
          requires:
            - push_test_image

      - run_functional_tests:
          name: functional_tests_test
          env_name: test
          requires:
            - test_deployment_eks
            - build_test_ui

      - approve_to_deploy:
          name: approve_prod_deployment_eks
          type: approval
          requires:
            - functional_tests_test

      - db_migrate_aws:
          name: migrate_prod_aws
          db_name: ${DB_NAME}
          requires:
            - approve_prod_deployment_eks

      - build_ui_push_to_s3:
          name: build_prod_ui
          env_name: prod
          distributionId: ${PROD_DISTRIBUTION_ID}
          requires:
            - push_prod_image

      - aws-ecr/build-and-push-image:
          name: push_prod_image
          repo: ${REPO}
          tag: prod
          requires:
            - migrate_prod_aws

      - eks_fargate_deployment:
          name: prod_deployment_eks
          cluster-name: ${CLUSTER_NAME}
          env-name: prod
          requires:
            - push_prod_image
            