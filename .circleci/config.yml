version: 2.1
orbs:
  node: circleci/node@4.4.0
  azure-aks: circleci/azure-aks@0.3.0
  azure-acr: circleci/azure-acr@0.2.0
  kubernetes: circleci/kubernetes@0.11.2
  azure-cli: circleci/azure-cli@1.2.0

definition:
  fast-checkout: &fast-checkout
    attach_workspace:
      at: .

jobs:
  create-workspace:
    executor: node/default
    steps:
      - checkout
      - run: rm -rf .git
      - persist_to_workspace:
          root: .
          paths:
            - .

  run_functional_tests:
    parameters:
      env_name:
        type: string
      db_name:
        type: string
    executor:
      name: node/default
    steps:
      - *fast-checkout
      - run:
          name: Gauge tests
          command: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            sudo apt-get install -y postgresql-client git-all gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libgbm-dev libappindicator1 libnss3 lsb-release xdg-utils wget

            AZURE_DB_USER=$(python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))" $AZURE_DB_USER)
            AZURE_DB_PASS=$(python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))" $AZURE_DB_PASS)

            psql "postgresql://${AZURE_DB_USER}:${AZURE_DB_PASS}@${AZURE_DB_HOST}/<< parameters.db_name >>" -f functional_tests/sql/dataSeed.sql
            sudo rm -rf /var/lib/apt/lists/*
            npm run install:ft
            npm run functional_test -- -- --env <<parameters.env_name>>
            psql "postgresql://${AZURE_DB_USER}:${AZURE_DB_PASS}@${AZURE_DB_HOST}/<< parameters.db_name >>" -f functional_tests/sql/deleteSeedData.sql
      - store_artifacts:
          path: functional_tests/reports
          destination: reports

  approve_to_deploy:
    docker:
      - image: circleci/node:13.4
    steps:
      - run: echo "Hold for approval"

  build_ui_push_to_blob_storage:
    parameters:
      env_name:
        type: string
    machine:
      image: ubuntu-1604:202104-01
    steps:
      - *fast-checkout
      - run:
          name: setup_machine
          command: |
            sudo apt-get update -y
            sudo apt-get install nodejs
            sudo apt-get install npm
            sudo apt-get install -y apt-utils
            sudo apt-get install wget

      - node/install-packages
      - run:
          name: build_ui
          command: |
            npm run gulp -- -- --env=<< parameters.env_name >>
            wget -O azcopy_v10.tar.gz https://aka.ms/downloadazcopy-v10-linux 
            tar -xf azcopy_v10.tar.gz --strip-components=1

            ./azcopy login --tenant-id ${TENANT_ID} --service-principal --application-id ${APP_ID}

            ./azcopy copy "crowdsource-ui/target/*" "${AZURE_ACC_URL}/${AZURE_STATIC_CONTENT}-<< parameters.env_name >>/" --recursive

  db_migrate_azure:
    parameters:
      db_name:
        type: string
    executor:
      name: node/default
    steps:
      - *fast-checkout
      - run:
          name: Run DB Migrate
          command: |
            echo << parameters.db_name >>
            export DATABASE_URL=postgresql://${AZURE_DB_USER}:${AZURE_DB_PASS}@${AZURE_DB_HOST}/<< parameters.db_name >>
            echo << parameters.db_name >>
            echo $DATABASE_URL
            npm run install:api
            cd crowdsource-api && npx db-migrate up

  cdn_invalidation:
    executor: azure-cli/default
    parameters:
      env-name:
        description: |
          Name of the env
        type: string

    steps:
      - azure-cli/install
      - azure-cli/login-with-user:
          alternate-tenant: false
      - run:
          name: cdn_invalidation
          command: |
            az cdn endpoint purge -g ${AZURE_RESOURCE_GROUP} -n << parameters.env-name >>-vakyansh --profile-name ${AZURE_PROFILE_NAME} --content-paths '/'

  aks_deployment:
    executor: azure-aks/default
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      env-name:
        description: |
          Name of the env
        type: string

    steps:
      - *fast-checkout
      - azure-aks/update-kubeconfig-with-credentials:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          perform-login: true
          resource-group: ${AZURE_RESOURCE_GROUP}
      - run:
          command: |
            ENV_IMAGE_NAME=${AZURE_LOGIN_SERVER_NAME}/${AZURE_REPO}:<< parameters.env-name >>

            ENV_IMAGE_NAME_DB_REFRESHER=${AZURE_LOGIN_SERVER_NAME}/${DB_REFRESHER_REPO}:<< parameters.env-name >>
            kubectl -n << parameters.env-name >> apply  -f ${HOME}/project/crowdsource-api/k8s-deployments/autoscaler_<< parameters.env-name >>.yaml

            sed -e "s|IMAGE_NAME|$ENV_IMAGE_NAME|g;s/CIRCLE_SHA1/$CIRCLE_SHA1/g" ${HOME}/project/crowdsource-api/k8s-deployments/azure/deployment.yaml | kubectl -n << parameters.env-name >> apply  -f -
            sed -e "s|IMAGE_NAME_DB_REFRESHER|$ENV_IMAGE_NAME_DB_REFRESHER|g;s/CIRCLE_SHA1/$CIRCLE_SHA1/g" ${HOME}/project/db-refresher/k8s-deployments/dbrefresher.yaml | kubectl -n << parameters.env-name >> apply  -f -
          name: Deploy container

workflows:
  build_test_deploy:
    jobs:
      - node/test:
          version: "14.15"

      - create-workspace:
          name: create-workspace
          requires:
            - node/test
          filters:
            branches:
              only: azure

      - db_migrate_azure:
          name: migrate_dev_azure
          db_name: ${AZURE_DEV_DB_NAME}
          requires:
            - create-workspace

      - build_ui_push_to_blob_storage:
          name: build_dev_ui
          env_name: dev
          requires:
            - migrate_dev_azure

      - cdn_invalidation:
          name: cdn_invalidation_dev
          env-name: dev
          requires:
            - build_dev_ui

      - azure-acr/build-and-push-image:
          name: push_dev_image
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY}
          path: ./crowdsource-api
          extra-build-args: --build-arg NODE_ENV=dev
          repo: ${AZURE_REPO}
          tag: dev
          requires:
            - build_dev_ui

      - azure-acr/build-and-push-image:
          name: push_db_refresher_image
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY}
          dockerfile: Dockerfile-dbRefresh
          path: ./db-refresher
          extra-build-args: --build-arg NODE_ENV=dev
          repo: ${DB_REFRESHER_REPO}
          tag: "dev,test,prod,uat"
          requires:
            - migrate_dev_azure

      - aks_deployment:
          name: dev_deployment_aks
          cluster-name: ${AZURE_CLUSTER_NAME}
          env-name: dev
          requires:
            - push_dev_image
            - push_db_refresher_image

      - run_functional_tests:
          name: functional_tests_dev
          env_name: dev
          db_name: ${AZURE_DEV_DB_NAME}
          requires:
            - dev_deployment_aks
            - build_dev_ui

      - approve_to_deploy:
          name: approve_test_deployment_aks
          type: approval
          requires:
            - dev_deployment_aks
            - build_dev_ui
            # - functional_tests_dev
          filters:
            branches:
              only: azure

      - db_migrate_azure:
          name: migrate_test_azure
          db_name: ${AZURE_TEST_DB_NAME}
          requires:
            - approve_test_deployment_aks

      - build_ui_push_to_blob_storage:
          name: build_test_ui
          env_name: test
          requires:
            - migrate_test_azure

      - cdn_invalidation:
          name: cdn_invalidation_test
          env-name: dev
          requires:
            - build_test_ui

      - azure-acr/build-and-push-image:
          name: push_test_image
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY}
          path: ./crowdsource-api
          extra-build-args: --build-arg NODE_ENV=test
          repo: ${AZURE_REPO}
          tag: test
          requires:
            - build_test_ui

      - aks_deployment:
          name: test_deployment_aks
          cluster-name: ${AZURE_CLUSTER_NAME}
          env-name: test
          requires:
            - push_test_image

      - run_functional_tests:
          name: functional_tests_test
          env_name: dev
          db_name: ${AZURE_TEST_DB_NAME}
          requires:
            - test_deployment_aks
            - build_test_ui

      - approve_to_deploy:
          name: approve_uat_deployment_aks
          type: approval
          requires:
            - test_deployment_aks
            - build_test_ui
            # - functional_tests_dev
          filters:
            branches:
              only: azure

      - db_migrate_azure:
          name: migrate_uat_azure
          db_name: ${AZURE_UAT_DB_NAME}
          requires:
            - approve_uat_deployment_aks

      - build_ui_push_to_blob_storage:
          name: build_uat_ui
          env_name: uat
          requires:
            - migrate_uat_azure

      - cdn_invalidation:
          name: cdn_invalidation_uat
          env-name: dev
          requires:
            - build_uat_ui

      - azure-acr/build-and-push-image:
          name: push_uat_image
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY}
          path: ./crowdsource-api
          extra-build-args: --build-arg NODE_ENV=uat
          repo: ${AZURE_REPO}
          tag: uat
          requires:
            - build_uat_ui

      - aks_deployment:
          name: uat_deployment_aks
          cluster-name: ${AZURE_CLUSTER_NAME}
          env-name: uat
          requires:
            - push_uat_image

      - approve_to_deploy:
          name: approve_prod_deployment_aks
          type: approval
          requires:
            - uat_deployment_aks
            # - functional_tests_dev
          filters:
            branches:
              only: azure

      - db_migrate_azure:
          name: migrate_prod_azure
          db_name: ${AZURE_PROD_DB_NAME}
          requires:
            - approve_prod_deployment_aks

      - build_ui_push_to_blob_storage:
          name: build_prod_ui
          env_name: prod
          requires:
            - migrate_prod_azure

      - cdn_invalidation:
          name: cdn_invalidation_prod
          env-name: dev
          requires:
            - build_prod_ui

      - azure-acr/build-and-push-image:
          name: push_prod_image
          login-server-name: ${AZURE_LOGIN_SERVER_NAME}
          registry-name: ${AZURE_REGISTRY}
          path: ./crowdsource-api
          extra-build-args: --build-arg NODE_ENV=prod
          repo: ${AZURE_REPO}
          tag: prod
          requires:
            - build_prod_ui

      - aks_deployment:
          name: prod_deployment_eks
          cluster-name: ${AZURE_CLUSTER_NAME}
          env-name: prod
          requires:
            - push_prod_image
